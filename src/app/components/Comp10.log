import React, { useState } from 'react';
import { useDrag, useDrop, DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Document, Page } from 'react-pdf';
import useDocumentModifier, { ModifiedPage } from './useDocumentModifier';

// Draggable Sidebar Item Component
const DraggableSidebarItem: React.FC<{ id: string; text: string; type: string }> = ({ id, text, type }) => {
 const [{ isDragging }, drag] = useDrag({
  type,
  item: { id, text, type },
  collect: monitor => ({
   isDragging: monitor.isDragging(),
  }),
 });

 return (
  <div
   ref={drag}
   style={{
    opacity: isDragging ? 0.5 : 1,
    cursor: 'move',
    marginBottom: '8px', // Adjust spacing as needed
   }}
  >
   {text}
  </div>
 );
};

// Main Content Component with PDF Viewer
const MainContent: React.FC = () => {
 const { downloadPDF, setPageOptions } = useDocumentModifier({ pdfUrl: '/sample.pdf' as string })

 const handleOptions = (options: ModifiedPage) => {
  console.log({ options });
  setPageOptions(options);

 }
 return (
  <div style={{ display: 'flex' }}>
   <div style={{ marginRight: '20px' }}>
    <button onClick={async () => await downloadPDF()} className='p-2 bg-violet-400 font-semibold'>Download</button>
    <Document file="/sample.pdf">
     <DropTargetPDFPage pageNumber={1} handlePageOptions={(options) => handleOptions(options)} />
     {/* Render more pages as needed */}
    </Document>
   </div>
  </div>
 );
};

// Drop Target Component on PDF Page
// Drop Target Component on PDF Page
const DropTargetPDFPage: React.FC<{ pageNumber: number; handlePageOptions: (options: ModifiedPage) => void }> = ({ pageNumber, handlePageOptions }) => {
 const [elements, setElements] = useState<{ id: string; text: string; type: string; position: { x: number; y: number } }[]>([]);

 const [, drop] = useDrop({
  accept: ['ITEM_1', 'ITEM_2'],
  drop: (item: { id: string; text: string; type: string }, monitor) => {
   const coordinate = monitor.getClientOffset();
   if (coordinate) {
    const { x, y } = coordinate;
    setElements(prev => [...prev, { ...item, position: { x, y } }]);
    const myOption: ModifiedPage = {
     page: pageNumber,
     value: item.text,
     options: {
      x,
      y,
      type: 'text'
     }
    }
    handlePageOptions(myOption)
   }
  },
 });

 const handleEnd = (item: any, monitor: any) => {
  const coordinate = monitor.getDropResult();
  if (coordinate) {
   const { x, y } = coordinate;
   setElements(prev => [...prev, { ...item, position: { x, y } }]);
   const myOption: ModifiedPage = {
    page: pageNumber,
    value: item.text,
    options: {
     x,
     y,
     type: 'text'
    }
   }
   handlePageOptions(myOption)
  }
 };

 return (
  <div
   ref={drop}
   style={{
    minHeight: '300px',
    position: 'relative',
   }}
  >
   <Page pageNumber={pageNumber}>
    {elements.map((element, index) => (
     <DraggableElement
      key={index}
      id={element.id}
      text={element.text}
      type={element.type}
      position={element.position}
      handlePageOptions={handlePageOptions} // Pass handlePageOptions prop to DraggableElement
      end={handleEnd} // Pass handleEnd function to DraggableElement
     />
    ))}
   </Page>
  </div>
 );
};


// Draggable Element Component
// Draggable Element Component
const DraggableElement: React.FC<{ id: string; text: string; type: string; position: { x: number; y: number }; handlePageOptions: (options: ModifiedPage) => void; end: (item: any, monitor: any) => void }> = ({ id, text, type, position, handlePageOptions, end }) => {
 const [newPosition, setPosition] = useState<{ x: number; y: number }>({ x: position.x, y: position.y });
 const [{ isDragging }, drag] = useDrag({
  type,
  item: { id, text, type },
  collect: monitor => ({
   isDragging: monitor.isDragging(),
  }),
  end: (item, monitor) => {
   const coordinate = monitor.getDropResult();
   if (coordinate) {
    setPosition({ x: coordinate.x, y: coordinate.y });
    end(item, monitor); // Call the end callback function
    handlePageOptions({ // Update page options
     page: pageNumber,
     value: text,
     options: {
      x: coordinate.x,
      y: coordinate.y,
      type: 'text',
     },
    });
   }
  },
 });

 return (
  <div
   ref={drag}
   style={{
    color: 'red',
    border: '2px solid blue',
    position: 'absolute',
    left: newPosition.x,
    top: newPosition.y,
    cursor: 'move',
    zIndex: 100, // Ensure the draggable elements are above other content
    opacity: isDragging ? 0.5 : 1,
   }}
  >
   {text}
  </div>
 );
};



// Main Component
const Comp10: React.FC = () => {
 return (
  <DndProvider backend={HTML5Backend}>
   <div style={{ display: 'flex' }}>
    <div style={{ marginRight: '20px' }}>
     {/* Sidebar with draggable items */}
     <DraggableSidebarItem id="1" text="Item 1" type="ITEM_1" />
     <DraggableSidebarItem id="2" text="Item 2" type="ITEM_2" />
    </div>
    <MainContent />
   </div>
  </DndProvider>
 );
};

export default Comp10;
